import { writeFileSync, appendFileSync } from 'fs'
import { SignalNetwork } from './SignalNetwork'
import { Signals, getSignalCount } from './Signals'

export class VCDGenerator {
  private fileName: string
  private signalNetworksInTime: { [id: string]: Signals }[] = []
  private signalHierarchy: { [id: string]: string[] } = {}
  private currentSignals: { [id: string]: Signals } = {}

  constructor(fileName: string) {
    this.fileName = fileName
  }

  handleSignalNetworks(signalNetworks: { [id: string]: SignalNetwork }): void {
    const signalNames = Object.keys(signalNetworks)

    signalNames.forEach(signalName => {
      const signals = signalNetworks[signalName].getSignals()
      this.handleSignal(signalName, signals)
    })
  }

  handleSignal(signalName: string, signals: Signals) {
    if (!Object.keys(this.signalHierarchy).includes(signalName)) {
      this.signalHierarchy[signalName] = []
    }

    const signalTypes = Object.keys(signals)

    signalTypes.forEach(signalType => {
      if (!this.signalHierarchy[signalName].includes(signalType)) {
        this.signalHierarchy[signalName].push(signalType)
      }
    })

    this.currentSignals[signalName] = signals
  }

  finishTimeStep() {
    this.signalNetworksInTime.push(this.currentSignals)
    this.currentSignals = {}
  }

  finishDump() {
    let metadata: string = '$version Generated by FCNS $end\r\n$timescale 1ns $end\r\n'
    writeFileSync(this.fileName, metadata)

    // generate the modules and the intialisation
    let header: string = '$scope module TOP $end\r\n'
    let init: string = '$dumpvar\r\n'
    Object.keys(this.signalHierarchy).forEach(signalName => {
      if (signalName === '') {
        return
      }

      header += '$scope module ' + signalName + ' $end\r\n'

      this.signalHierarchy[signalName].forEach(signal => {
        header +=
          '$var integer 32 ' +
          signalName +
          '_' +
          signal +
          ' ' +
          signalName +
          '.' +
          signal +
          ' $end\r\n'
        init += 'b00000000000000000000000000000000 ' + signalName + '_' + signal + '\r\n'
      })

      header += '$upscope $end\r\n'
    })
    header += '$upscope $end\r\n'
    init += '$end\r\n'
    appendFileSync(this.fileName, header)
    appendFileSync(this.fileName, init)

    let timestep: number = 0

    this.signalNetworksInTime.forEach(signalNetworks => {
      appendFileSync(this.fileName, '#' + String(timestep) + '\r\n')

      const signalNames = Object.keys(signalNetworks)

      signalNames.forEach(signalName => {
        if (signalName === '') {
          return
        }

        const signals = this.signalHierarchy[signalName]

        signals.forEach(signalType => {
          const count: number = getSignalCount(signalType, signalNetworks[signalName])
          const bits: string = (count >>> 0).toString(2)

          appendFileSync(this.fileName, 'b' + bits + ' ' + signalName + '_' + signalType + '\r\n')
        })
      })
      timestep += 1
    })
  }
}
